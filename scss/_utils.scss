
// The following are based on http://jakearchibald.github.com/sass-ie/
// and https://github.com/nex3/sass/issues/408#issuecomment-6086901

$media-queries: true !default;
$is-ie-lt-9: false !default;

@mixin respond-to($min-width, $max-width: false) {
  @if $media-queries {
    @media screen and (min-width: $min-width) {
       @if $max-width {
         @media (max-width: $max-width) {
            @content
          }
       } @else {
         @content;
       }
     }
  }
  @else if $min-width <= $griddles-media-query-free-breakpoint and (not $max-width or $max-width and $max-width >= $griddles-media-query-free-breakpoint) {
    @content;
  }
}

@mixin ie-lt-9 {
    @if $is-ie-lt-9 {
        @content;
    }
}

// GRIDDLES INTERNAL PREPROCESSING --------------------------------------
// Note: Hopefully we can factor out some of the data massaging in future.

// From a step value return a list of all perecentages
// we want to generate.
// E.g: For a step value of 5 this should return a list of
// [5,10,15...100]
@function get-steps-and-value-list($step-value) {
    $i: $step-value;
    $list: ();
    @while $i <= 100 {
        $items: "#{$i}", $i;
        $list: append($list, $items, space);
        $i: $i + $step-value;
    }
    // @debug $list;
    @return $list;
}

// Fed the output of get-steps-and-value-list
// This function generates the fraction values
// The result list is all the steps and fractions for the
// selector generation.
@function get-fraction-and-value-list($denominators-list, $list) {
    @each $denominator in  $denominators-list {
        $i: 1;
        @while $i < $denominator {
            $numerator: $i;
            $value: (100 / $denominator) * $numerator;
            $fraction: $numerator + $griddles-fraction-symbol + $denominator;
            // Generates a comma separated list of space-separated values
            $items: $fraction, $value;
            $list: append($list, $items, space);
            $i: $i + 1;
        }
    }
    //@debug $list;
    @return $list;
}

// This function provides a list of all the unique values
// we need to generate so we can use this to collapse selectors
// with the same value together.
@function get-unique-value-list($key-and-value-list) {

    //@debug $key-and-value-list;
    $unique-value-keys: ();
    $unique-values: ();

    // For some reason index based on floats fails
    // So we need to track keys and values separately.
    @each $key-and-val in $key-and-value-list {
        //@debug $key-and-val;
        $key: nth($key-and-val, 1);
        $val: nth($key-and-val, 2);
        @if index($unique-value-keys, "#{$val}") == false {
            $unique-value-keys: append($unique-value-keys, "#{$val}", comma);
            $items: "ext-" + $key, $val;
            $unique-values: append($unique-values, $items, space);
        }
    }

    @return $unique-values;
}

// This function adds the key to lookup from the unique value list to the
// list of selectors.
@function get-sel-key-val-list($unique-value-list, $key-and-value-list) {
    // Loop over unique values
    $sel-key-val-list: ();
    @each $unique-keypair in $unique-value-list {

        $extend-sel: nth($unique-keypair, 1);
        $extend-val: nth($unique-keypair, 2);

        @each $keypair in $key-and-value-list {
            $key: nth($keypair, 1);
            $val: nth($keypair, 2);

            @if $extend-val == $val {
                $items: $extend-sel, $key, $val;
                $sel-key-val-list: append($sel-key-val-list, $items, space);
            }

        }
    }
    @return $sel-key-val-list;
}
